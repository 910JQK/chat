from functools import wraps


def 封装消息(类型):
    def decorator(f):
        @wraps(f)
        def g(*args, **kwargs):
            消息内容 = f(*args, **kwargs)
            return { '类型': 类型, '内容': 消息内容 }
        return g
    return decorator


说话消息 = 封装消息('说话')
发图消息 = 封装消息('发图')
通知消息 = 封装消息('通知')
反馈消息 = 封装消息('反馈')
确认消息 = 封装消息('确认')
频道列表消息 = 封装消息('频道列表')
用户列表消息 = 封装消息('用户列表')
名字更新消息 = 封装消息('名字更新')
聊天记录消息 = 封装消息('聊天记录')


class 聊天:
    @说话消息
    def 说话(谁, 说了什么):
        return {'谁': 谁, '说了什么': 说了什么}
    @发图消息
    def 发图(谁, 发了什么):
        return {'谁': 谁, '发了什么': 发了什么}


class 通知:
    @通知消息
    def 新用户加入(用户):
        return f'用户 {用户.名字} 加入了聊天'
    @通知消息
    def 用户退出(用户):
        return f'用户 {用户.名字} 退出了聊天'
    @通知消息
    def 用户改名(旧名字, 新名字):
        return f'用户 {旧名字} 已改名为 {新名字}'
    @通知消息
    def 用户下线(用户):
        return f'用户 {用户.名字} 已下线'
    @通知消息
    def 主题更改(用户, 新主题):
        return f'讨论主题已被 {用户.名字} 更改为 {新主题}'


class 反馈:
    
    @反馈消息
    def 欢迎消息(新用户):
        return f'欢迎来到聊天室! 你现在的名字是 {新用户.名字}'
    
    class 改名:
        @反馈消息
        def 重名(新名字):
            return f'名字 {新名字} 正在被其它人使用'
        @反馈消息
        def 不合法(新名字):
            return f'名字 {新名字} 不合法'
        @反馈消息
        def 缺少名字():
            return f'请输入新的名字'
        @反馈消息
        def 已注册(新名字):
            return f'名字 {新名字} 已被注册, 需要登录才能使用'
        @反馈消息
        def 成功():
            return f'名字更改成功'

    class 注册:
        @反馈消息
        def 随机名字():
            return f'不可注册自动生成的随机名字, 请先改名'
        @反馈消息
        def 成功(邮箱):
            return f'注册成功, 激活令牌已发至 {邮箱}'
        @反馈消息
        def 邮箱重复(邮箱):
            return f'注册失败: 邮箱 {邮箱} 已被其它用户使用'
        @反馈消息
        def 已注册(名字):
            return f'注册失败: 名字 {名字} 已经被注册'

    class 激活:
        @反馈消息
        def 成功():
            return f'激活成功'
        @反馈消息
        def 失败():
            return f'激活失败 (令牌无效或用户不存在)'

    class 登入:
        @反馈消息
        def 未注册():
            return f'该名字尚未注册, 无法登录'
        @反馈消息
        def 未激活():
            return f'该帐号尚未激活, 无法登录'
        @反馈消息
        def 不匹配():
            return f'名字和密码不匹配, 登录失败'            
        @反馈消息
        def 成功():
            return f'登录成功'

    class 聊天:
        @反馈消息
        def 什么也没说():
            return f'请输入说话内容'
        @反馈消息
        def 图片不合法():
            return f'上传的图片不合法'

    class 频道:
        @反馈消息
        def 已存在(频道):
            return f'频道已存在: {频道} '
        @反馈消息
        def 不存在(频道):
            return f'频道不存在: {频道}'
        @反馈消息
        def 已加入(频道):
            return f'您已经加入了频道: {频道}'
        @反馈消息
        def 未加入(频道):
            return f'您并未加入频道: {频道}'
        @反馈消息
        def 创建成功(频道):
            return f'成功创建频道: {频道}'
        @反馈消息
        def 更改成功():
            return f'主题更改成功'
        @反馈消息
        def 缺少名称(频道):
            return f'请输入频道名称'

    class 记录:
        @反馈消息
        def 请求过多(最多):
            return f'在聊天窗口最多请求 {最多} 条记录'


class 消息确认:
    @确认消息
    def 注册成功():
        return {'确认什么': '成功注册'}
    @确认消息
    def 收到说话消息(序号):
        return {'确认什么': '收到说话消息', '序号': 序号}
    @确认消息
    def 收到图片消息(序号):
        return {'确认什么': '收到图片消息', '序号': 序号}
    @确认消息
    def 创建成功(频道):
        return {'确认什么': '成功创建频道', '频道': 频道}
    @确认消息
    def 退出成功(频道):
        return {'确认什么': '成功退出频道', '频道': 频道}
    @确认消息
    def 更改成功(频道, 新主题):
        return {'确认什么': '成功更改主题', '新主题': 新主题, '频道': 频道}
    @确认消息
    def 加入成功(频道):
        return {
            '确认什么': '成功加入频道',
            '频道': 频道,
            '主题': 频道列表()[频道].主题,
            '用户列表': list(频道列表()[频道].加入用户列表)
        }


class 其它消息:
    @频道列表消息
    def 频道列表():
        return [{'名称':c.频道名, '主题':c.主题} for c in 频道列表().values()]
    @用户列表消息
    def 用户列表(频道):
        return list(频道列表()[频道].加入用户列表)
    @名字更新消息
    def 名字更新(新名字, 登入状态):
        return { '新名字': 新名字, '登入状态': 登入状态 }
    @聊天记录消息
    def 聊天记录(频道名, 记录):
        return {
            '时间': 记录.时间.strftime('%H:%M:%S'),
            '类型': 记录.类型,
            '频道': 频道名,
            '用户': 记录.用户,
            '内容': 记录.内容
        }


